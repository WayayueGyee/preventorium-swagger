openapi: '3.0.0'
info:
  version: '0.0.1'
  title: 'Preventorium API'
servers:
  - url: '/api/'

paths:
  /v1/news:
    description: В запросе используется keyset pagination. Отсюда в параметрах появились id и время
    parameters:
      - name: publicationId
        in: query
        description: Id последней новости из предыдущего запроса новостей
        required: false
        schema:
          $ref: '#/components/schemas/PublicationId'
      - name: publicationTime
        description: Дата последней новости из предыдущего запроса новостей
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: quantity
        description: Сколько новостей получить
        in: query
        required: false
        schema:
          type: integer
    get:
      summary: Возвращает новости по количеству, равному `quantity` или значению по-умолчанию
      description: Возвращает `quantity` публикаций с типом, обозначающим новость, после указанных `publicationId` и `publicationTime`. 
        Для получения первой страницы новостей параметры id и время указывать не нужно.      
      tags:
        - Publications
      responses:
        200:
          description: Новости получены успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicationPreview'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /v1/publications/{publicationId}/info:
    parameters:
      - name: publicationId
        in: path
        description: Id публикации
        required: true
        schema:
          $ref: '#/components/schemas/PublicationId'
    get:
      summary: Возвращает подробную информацию о публикации
      tags:
        - Publications
      responses:
        200:
          description: Информация о публикации получена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /v1/publications/{publicationId}/react:
    parameters:
      - name: publicationId
        in: path
        description: Id публикации
        required: true
        schema:
          $ref: '#/components/schemas/PublicationId'
    patch:
      tags:
        - Publications
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  reaction: 
                    $ref: "#/components/schemas/Reaction"
                  action:
                    enum:
                      - ADD
                      - REMOVE
      responses:
        204:
          description: Реакция поставлена успешно
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError"
  
  /v1/publications/search:
    parameters:
      - name: type
        in: query
        style: form
        description: Тип публикации
        required: false
        schema:
          $ref: "#/components/schemas/PublicationType"
      - name: tag
        in: query
        style: form
        description: Тэг у публикации
        required: false
        schema:
          $ref: "#/components/schemas/Tag"
      - name: sort
        in: query
        description: Фактор сортировки. По умолчанию `NEWEST`
        required: false
        schema:
          $ref: "#/components/schemas/SortFactor"
    get:
      summary: Возвращает список публикаций с применёнными к нему фильтрами
      tags:
        - Publications
      responses:
        200:
          description: Публикации получены успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationPreview'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /v1/publications/{publicationId}/comment:
    parameters:
      - name: publicationId
        in: path
        description: Id публикации
        required: true
        schema:
          $ref: '#/components/schemas/PublicationId'
    post:
      summary: Оставляет комментарий пользователя под публикацией
      tags:
        - Publications
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentCreate"
      responses:
        200:
          description: Комментарий успешно добавлен для публикации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentId"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError"

  /v1/auth/register:
    post:
      summary: Регистрирует нового пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        200:
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        400:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /v1/auth/login:
     post:
      summary: Аутентификация пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        200:
          description: Пользователь успешно авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          $ref: '#/components/responses/BadRequestError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /v1/auth/refresh:
    post:
      summary: Обновление токенов по refresh token
      tags:
        - Auth
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokens"
      responses:
        200:
          description: Токены обновлены успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /v1/chats:
    get:
      summary: Возвращает список всех чатов между пользователями
      tags:
        - Chats
      security:
        - bearerAuth: []
      responses:
        200:
          description: Чаты получены успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chat"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          $ref: "#/components/responses/InternalServerError"        
      
  /v1/chats/{chatId}/messages:
    description: В запросе используется keyset pagination. Отсюда в параметрах появились id и время
    parameters:
      - name: chatId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/ChatId"
      - name: messageId
        in: query
        description: Id последнего сообщения из предыдущего запроса сообщений для данного чата
        required: false
        schema:
          $ref: "#/components/schemas/MessageId"
      - name: messageSendingTime
        description: Дата отправки последнего сообщения из предыдущего запроса сообщений
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: quantity
        description: Сколько сообщений получить
        in: query
        required: false
        schema:
          type: integer
    get:
      summary: Возвращает сообщения по количеству, равному `quantity` или значению по-умолчанию
      tags:
        - Chats
      security:
        - bearerAuth: []
      responses:
        200:
          description: Сообщения чата получены успешно
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError" 

components:
  schemas:
    UserId:
      description: Уникальный идентификатор пользователя
      type: integer
    User:
      type: object
      description: Полный объект пользователя
      required:
        - id
        - email
        - username
        - firstName
        - lastName
        - role
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          description: Название роли
        avatar:
          type: string
          description: Ссылка на аватар
    UserRegistration:
      type: object
      description: Модель регистрации пользователя
      required:
        - email
        - password
        - username
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    UserLogin:
      type: object
      description: Модель аутентификации пользователя
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    RefreshTokens:
      type: object
      description: Обновить токены по refresh token
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          format: JWT

    PublicationId:
      description: Уникальный идентификатор публикации
      type: integer
    PublicationType:
      type: string
      enum:
        - NEWS
        - ARTICLE
        - POST
    Publication:
      type: object
      required:
        - id
        - author_id
        - publicationDate
        - title
        - content
        - type
      properties:
        id:
          $ref: '#/components/schemas/PublicationId'
        author_id:
          $ref: "#/components/schemas/UserId"
        publicationDate:
          type: string
          format: date-time
        title:
          type: string
        content:
          type: string
        type:
          $ref: "#/components/schemas/PublicationType"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ReactionCount"
    PublicationPreview:
      type: object
      required:
        - id
        - author_id
        - publicationDate
        - title
        - shortContent
        - type
      properties:
        id:
          $ref: '#/components/schemas/PublicationId'
        author_id:
          $ref: "#/components/schemas/UserId"
        publicationDate:
          type: string
          format: date-time
        title:
          type: string
        shortContent:
          type: string
        type:
          $ref: "#/components/schemas/PublicationType"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"

    ReactionId:
      type: integer
      description: Уникальный идентификатор реакции
    ReactionType:
      type: string
      enum:
        - BINARY
        - EMOJI
    BinaryReactionType:
      type: string
      enum:
        - LIKE
        - DISLIKE
    Reaction:
      type: object
      required:
        - id
        - publicationId
        - userId
        - type
      properties:
        id:
          $ref: "#/components/schemas/ReactionId"
        publicationId:
          $ref: "#/components/schemas/PublicationId"
        userId:
          $ref: "#/components/schemas/UserId"
        type:
          $ref: "#/components/schemas/ReactionType"
        binaryReactionType:
          $ref: "#/components/schemas/BinaryReactionType"
        emojiCode:
          type: string
          description: Код эмодзи в unicode формате
    ReactionCount:
      type: object
      required:
        - count
        - type
      properties:
        count:
          type: integer
          description: Количество реакций данного типа
        type:
          $ref: "#/components/schemas/ReactionType"
        binaryReactionType:
          $ref: "#/components/schemas/BinaryReactionType"
        emojiCode:
          type: string
          description: Код эмодзи в unicode формате

    Tag:
      type: string
      description: Тэг для публикаций

    SortFactor:
      type: string
      enum:
        - NEWEST
        - OLDEST
        - MOST_LIKED
        - LEAST_LIKED

    CommentId:
      type: integer
      description: Уникальный идентификатор комментария
    CommentCreate:
      type: object
      description: Модель создания комментария
      required:
        - publictaionId
        - userId
        - content
      properties:
        publictaionId:
          $ref: "#/components/schemas/PublicationId"
        userId:
          $ref: "#/components/schemas/UserId"
        content:
          type: string

    AuthResponse:
      type: object
      required:
        - accessToken
        - accessTokenExpiresIn
        - refreshToken
        - refreshTokenExpiresIn
      properties:
        accessToken:
          type: string
          format: JWT
        accessTokenExpiresIn:
          type: string
          format: date-time
        refreshToken:
          type: string
          format: JWT
        refreshTokenExpiresIn:
          type: string
          format: date-time

    ChatId:
      type: integer
      description: Уникальный идентификатор чата
    Chat:
      type: object
      required:
        - id
        - participant1
        - participant2
        - latestMessage
      properties:
        id:
          $ref: "#/components/schemas/ChatId"
        participant1:
          $ref: "#/components/schemas/UserId"
        participant2:
          $ref: "#/components/schemas/UserId"
        latestMessage:
          $ref: "#/components/schemas/Message"
        avatar:
          type: string
    
    MessageId:
      type: integer
      description: Уникальный идентификатор сообщения
    Message:
      type: object
      required:
        - id
        - chatId
        - userId
        - content
        - sendingTime
      properties:
        id:
          $ref: "#/components/schemas/MessageId"
        chatId:
          $ref: "#/components/schemas/ChatId"
        userId:
          $ref: "#/components/schemas/UserId"
        content:
          type: string
        sendingTime:
          type: string
          format: date-time


    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string

  responses:
    BadRequestError:
      description: 'Bad Request Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: 'Access token is missing or invalid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: 'Not Found Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: 'Internal Server Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
